diff --git a/src/main/java/edu/uoc/practica/bd/util/DBAccessor.java b/src/main/java/edu/uoc/practica/bd/util/DBAccessor.java
index 03cf1ea..41fa3e7 100755
--- a/src/main/java/edu/uoc/practica/bd/util/DBAccessor.java
+++ b/src/main/java/edu/uoc/practica/bd/util/DBAccessor.java
@@ -53,10 +53,17 @@ public class DBAccessor {
    Connection conn = null;
 
    // TODO Implement the DB connection
-     
+   try {
+
+     Class.forName( "org.postgresql.Driver" );
+     String url = String.format("jdbc:postgresql://%s/%s?user=%s&password=%s",
+         this.host, this.dbname, this.user, this.passwd);
 
-   // TODO Sets the search_path
-     
+     conn = DriverManager.getConnection(url);
+
+   } catch (Exception e) {
+     e.printStackTrace();
+   }
 
    return conn;
  }


diff --git a/src/main/resources/db.properties b/src/main/resources/db.properties
index 9491da8..d2c0293 100755
--- a/src/main/resources/db.properties
+++ b/src/main/resources/db.properties
@@ -1,6 +1,6 @@
 host localhost
 port 5432
-dbname postgres
+dbname ubd_20172
 user postgres
-passwd 123456
-schema  ubd_20172
+passwd root
+schema  public


diff --git a/src/main/java/edu/uoc/practica/bd/uocdb/exercise1/Exercise1UpdateOrDeleteToyDataFromFile.java b/src/main/java/edu/uoc/practica/bd/uocdb/exercise1/Exercise1UpdateOrDeleteToyDataFromFile.java
index 2f90fea..093445b 100755
--- a/src/main/java/edu/uoc/practica/bd/uocdb/exercise1/Exercise1UpdateOrDeleteToyDataFromFile.java
+++ b/src/main/java/edu/uoc/practica/bd/uocdb/exercise1/Exercise1UpdateOrDeleteToyDataFromFile.java
@@ -2,10 +2,7 @@ package edu.uoc.practica.bd.uocdb.exercise1;
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
-import java.sql.Connection;
-import java.sql.PreparedStatement;
-import java.sql.ResultSet;
-import java.sql.SQLException;
+import java.sql.*;
 import java.util.List;
 
 import edu.uoc.practica.bd.util.DBAccessor;
@@ -13,6 +10,7 @@ import edu.uoc.practica.bd.util.FileUtilities;
 
 public class Exercise1UpdateOrDeleteToyDataFromFile {
 	private FileUtilities fileUtilities;
+	private static Integer MAX_PRICE_DEVIATION_ALLOWED = 20;
 
 	public Exercise1UpdateOrDeleteToyDataFromFile() {
 		fileUtilities = new FileUtilities();
@@ -26,6 +24,50 @@ public class Exercise1UpdateOrDeleteToyDataFromFile {
 
 	private void run() {
 
+		List<List<String>> fileContents = this.getFileContent();
+
+		DBAccessor dbaccessor = new DBAccessor();
+		dbaccessor.init();
+		Connection conn = dbaccessor.getConnection();
+		// TODO Prepare everything before updating or delete
+
+		try {
+			conn.setAutoCommit(false);
+            PreparedStatement pst_check_toy = conn.prepareStatement("SELECT toy_id FROM wished_toy WHERE toy_id=?");
+            PreparedStatement pst_delete_toy = conn.prepareStatement("DELETE FROM toy WHERE toy_id=?");
+            PreparedStatement pst_get_toy = conn.prepareStatement("SELECT * FROM toy WHERE toy_id=?");
+            PreparedStatement pst_update_toy = conn.prepareStatement(
+                    "UPDATE toy " +
+                         "SET manufacturer = ?, price = ?, toy_type = ?, toy_name = ? " +
+                         "WHERE toy_id = ?"
+            );
+
+            // TODO Update or delete Toy for every row in file
+            for (List<String> row : fileContents) {
+                this.setSelectPreparedStatement(pst_check_toy, row);
+                ResultSet rs = pst_check_toy.executeQuery();
+
+                if (!rs.next())
+                    this.removeToy(pst_delete_toy, row);
+                else
+                    this.updateToy(pst_get_toy, pst_update_toy, row);
+
+            }
+
+            // TODO Validate transaction
+            conn.commit();
+
+		} catch (SQLException e) {
+			e.printStackTrace();
+            this.closeConnection(conn, false);
+		}
+
+
+		// TODO Close resources and check exceptions
+        this.closeConnection(conn, true);
+	}
+
+	private List<List<String>> getFileContent() {
 		List<List<String>> fileContents = null;
 
 		try {
@@ -38,24 +80,77 @@ public class Exercise1UpdateOrDeleteToyDataFromFile {
 			e.printStackTrace();
 		}
 		if (fileContents == null) {
-			return;
-		}
-
-		DBAccessor dbaccessor = new DBAccessor();
-		dbaccessor.init();
-		Connection conn = dbaccessor.getConnection();
-		// TODO Prepare everything before updating or delete
-	
-		// TODO Update or delete Toy for every row in file
-		for (List<String> row : fileContents) {	
-	
+			return null;
 		}
-		// TODO Validate transaction
 
-		// TODO Close resources and check exceptions
+		return fileContents;
 	}
 
-	private void setUpdatePreparedStatement(PreparedStatement updateStatement, List<String> row) throws SQLException {
+	private void closeConnection(Connection conn, Boolean succesfull) {
+        try {
+
+			if (succesfull) {
+				conn.close();
+			} else {
+				conn.rollback();
+			}
+
+		} catch (SQLException e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void updateToy(PreparedStatement pst_get_toy, PreparedStatement pst_update_toy, List<String> row) {
+
+	    try {
+
+	        this.setSelectPreparedStatement(pst_get_toy, row);
+            ResultSet rs = pst_get_toy.executeQuery();
+
+	        if (rs.next()) {
+                Double old_price = rs.getDouble("price");
+                Double new_price = this.getToyPrice(row);
+
+                Double price_deviation =  ((new_price / old_price) - 1) * 100;
+
+                price_deviation = Math.abs(price_deviation);
+
+                if ( price_deviation > MAX_PRICE_DEVIATION_ALLOWED ) {
+                    throw new Exception(String.format("Price update failed for toy_id: %d " +
+                            ", current deviation: %f.  Max allowed: %d",
+                            this.getToyId(row), price_deviation, MAX_PRICE_DEVIATION_ALLOWED));
+                }
+
+                this.setUpdatePreparedStatement(pst_update_toy, row);
+                Integer affected_rows = pst_update_toy.executeUpdate();
+
+				if (affected_rows == 0)
+					throw new SQLException(String.format("toy_id: %s was correctly modified", this.getToyId(row)));
+            }
+
+        } catch (SQLException e) {
+	        e.printStackTrace();
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+
+    }
+
+    private void removeToy(PreparedStatement pst_delete_toy, List<String> row) {
+        // Toy is not in WISHED_TOY table, so we remove it from TOY table.
+        try {
+            this.setDeletePreparedStatement(pst_delete_toy, row);
+            Integer modified_rows = pst_delete_toy.executeUpdate();
+
+            if (modified_rows == 0)
+                throw new SQLException(String.format("toy_id: %s was not present in DB", this.getToyId(row)));
+
+        } catch (Exception e) {
+            e.printStackTrace();
+        }
+    }
+
+    private void setUpdatePreparedStatement(PreparedStatement updateStatement, List<String> row) throws SQLException {
 		setValueOrNull(updateStatement, 1, getToyManufacturer(row));
 		setValueOrNull(updateStatement, 2, getToyPrice(row));
 		setValueOrNull(updateStatement, 3, getToyType(row));
@@ -99,8 +194,17 @@ public class Exercise1UpdateOrDeleteToyDataFromFile {
 		return getDoubleFromStringOrNull(row.get(index));
 	}
 
-	private String getString(List<String> row, int index) {
-		return row.get(index);
+    private String getString(List<String> row, int index) {
+        return this.getStringOrNull(row, index);
+    }
+
+	private String getStringOrNull(List<String> row, int index){
+	    String str = (index < row.size()) ? row.get(index) : null;
+
+	    if (str != null && str.isEmpty())
+	        return null;
+
+		return str;
 	}
 
 	private Integer getIntegerFromStringOrNull(String integer) {
@@ -114,7 +218,11 @@ public class Exercise1UpdateOrDeleteToyDataFromFile {
 	private void setValueOrNull(PreparedStatement preparedStatement, int parameterIndex, Object obj)
 			throws SQLException {
 		// TODO: look
-		preparedStatement.setObject(parameterIndex, obj);
+		if (obj == null)
+			preparedStatement.setNull(parameterIndex, Types.NULL);
+		else
+			preparedStatement.setObject(parameterIndex, obj);
+
 	}
 
 }
